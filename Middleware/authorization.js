const Admin = require("../Models/adminModel");
const Resident = require("../Models/residentModel");
const catchAsync = require("../ErrorHandler/catchAsync");
const AppError = require("../ErrorHandler/appError");
const authUtils = require("../Utils/authUtils");

// Protect middleware -> For access control of admin users
exports.protect = catchAsync(async (req, res, next) => {
	let token;
	// Checking the Authorization in headers .
	if (req.headers.authorization && req.headers.authorization.startsWith("Bearer")) { // Getting the provided token.
		token = req.headers.authorization.split(" ")[1];
	} else { // Handling header doesn't contain AuthorizationToken.
		next(new AppError("Not Authorized", 401));
		return;
	}

	// ? Verifying the token is generated by this our api.
	const id = await authUtils.getUserId(token);
	// passing the id to the next middleware
	res.locals.id = id;
	next();
});


exports.protectAdmin = catchAsync(async (req, res, next) => {
	console.log("protectAdmin");
	const id = res.locals.id;
	// getting the user related to the current token.
	const admin = await Admin.findById(id);
	if (! admin) { // not authorized if user doesn't exist!
		next(new AppError("Not Authorized", 401));
		return;
	}

	// setting the user if it exists

	res.locals.admin = admin;
	next();
});

exports.protectResident = catchAsync(async (req, res, next) => {
	const id = res.locals.id;
	// getting the user related to the current token.
	const resident = await Resident.findById(id);
	if (! resident) { // not authorized if user doesn't exist!
		next(new AppError("Not Authorized", 401));
		return;
	}
	// setting the user if it exists
	res.locals.resident = resident;
	next();
});
